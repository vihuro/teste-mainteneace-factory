// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TesteMainteneace.Persistence.Context;

#nullable disable

namespace TestMainteneace.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231123160231_addTableOfTheStorage")]
    partial class addTableOfTheStorage
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Daily.DailyEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Observation")
                        .HasColumnType("text");

                    b.Property<int>("OrderServiceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OrderServiceId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("tab_daily");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Flow.FlowEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("TypeFlow")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tab_flow");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Location.LocalExecutationEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Local")
                        .HasColumnType("text");

                    b.Property<Guid>("UserAuthId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserAuthId");

                    b.ToTable("tab_location");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Order.OrderServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("LocationMainteneaceId")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("Situacion")
                        .HasColumnType("integer");

                    b.Property<DateTime>("SuggestedMainteneaceDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserCreatedId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationMainteneaceId");

                    b.HasIndex("UserCreatedId");

                    b.ToTable("tab_order_service");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.EndUserFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlowOrderServiceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserEndId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlowOrderServiceId")
                        .IsUnique();

                    b.HasIndex("UserEndId");

                    b.ToTable("tab_end_user_flow");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.InitialUserFlow", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreateded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("FlowOrderServiceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserInitialId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("FlowOrderServiceId")
                        .IsUnique();

                    b.HasIndex("UserInitialId");

                    b.ToTable("tab_initial_user_flow");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.StatusOrder.FlowOrderServiceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FlowId")
                        .HasColumnType("integer");

                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderServiceId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FlowId");

                    b.HasIndex("OrderServiceId");

                    b.ToTable("tab_flow_order_service");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.StorageParts.StoragePartsEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("Quantity")
                        .HasColumnType("double precision");

                    b.Property<double>("QuantityMax")
                        .HasColumnType("double precision");

                    b.Property<double>("QuantityMin")
                        .HasColumnType("double precision");

                    b.Property<double>("QuantitySec")
                        .HasColumnType("double precision");

                    b.Property<string>("Unit")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tab_storage_parts");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.User.UserAuth", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actived")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("DateTimeCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateTimeUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("tab_user_auth");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Daily.DailyEntity", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.Order.OrderServiceEntity", "OrderService")
                        .WithMany("Daily")
                        .HasForeignKey("OrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteMainteneace.Domain.Entities.User.UserAuth", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OrderService");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Location.LocalExecutationEntity", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.User.UserAuth", "UserAuth")
                        .WithMany()
                        .HasForeignKey("UserAuthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserAuth");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Order.OrderServiceEntity", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.Location.LocalExecutationEntity", "LocationMainteneace")
                        .WithMany()
                        .HasForeignKey("LocationMainteneaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteMainteneace.Domain.Entities.User.UserAuth", "UserCreated")
                        .WithMany()
                        .HasForeignKey("UserCreatedId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LocationMainteneace");

                    b.Navigation("UserCreated");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.EndUserFlow", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.StatusOrder.FlowOrderServiceEntity", "FlowOrderService")
                        .WithOne("EndUserFlow")
                        .HasForeignKey("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.EndUserFlow", "FlowOrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteMainteneace.Domain.Entities.User.UserAuth", "UserEnd")
                        .WithMany()
                        .HasForeignKey("UserEndId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowOrderService");

                    b.Navigation("UserEnd");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.InitialUserFlow", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.StatusOrder.FlowOrderServiceEntity", "FlowOrderService")
                        .WithOne("InitialUserFlow")
                        .HasForeignKey("TesteMainteneace.Domain.Entities.OrderFlow.UserFlow.InitialUserFlow", "FlowOrderServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteMainteneace.Domain.Entities.User.UserAuth", "UserInitial")
                        .WithMany()
                        .HasForeignKey("UserInitialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FlowOrderService");

                    b.Navigation("UserInitial");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.StatusOrder.FlowOrderServiceEntity", b =>
                {
                    b.HasOne("TesteMainteneace.Domain.Entities.Flow.FlowEntity", "Flow")
                        .WithMany()
                        .HasForeignKey("FlowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TesteMainteneace.Domain.Entities.Order.OrderServiceEntity", "OrderService")
                        .WithMany()
                        .HasForeignKey("OrderServiceId");

                    b.Navigation("Flow");

                    b.Navigation("OrderService");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.Order.OrderServiceEntity", b =>
                {
                    b.Navigation("Daily");
                });

            modelBuilder.Entity("TesteMainteneace.Domain.Entities.StatusOrder.FlowOrderServiceEntity", b =>
                {
                    b.Navigation("EndUserFlow");

                    b.Navigation("InitialUserFlow");
                });
#pragma warning restore 612, 618
        }
    }
}
